using System.Text;
using Lab3.Library;

/*
Умова:
    Одним із важливих понять, що використовуються в теорії алгоритмів, є рекурсія. Неформально її можна визначити як 
використання в описі об'єкта самого себе. Якщо йдеться про процедуру, то в процесі виконання ця процедура напряму 
або опосередковано (через інші процедури) викликає сама себе.
    Рекурсія є дуже «потужним» методом побудови алгоритмів, але таїть у собі деякі небезпеки. Наприклад, неакуратно 
написана рекурсивна процедура може увійти в нескінченну рекурсію, тобто, ніколи не завершити своє виконання (насправді, 
виконання закінчиться з переповненням стека).
    Оскільки рекурсія може бути непрямою (процедура викликає сама себе через інші процедури), то завдання визначення 
того факту, чи є дана процедура рекурсивною, досить складне. Спробуємо розв'язати простішу задачу.
    Розглянемо програму, що складається з n процедур P1, P2, ..., ..., Pn. Нехай для кожної процедури відомі процедури, 
які вона може викликати. Процедура P називається потенційно рекурсивною, якщо існує така послідовність процедур 
Q0, Q1, ..., Qk, що Q0 = Qk = P і для i = 1...k процедура Qi-1 може викликати процедуру Qi. У цьому разі завдання 
полягатиме у визначенні для кожної із заданих процедур, чи є вона потенційно рекурсивною.
    Потрібно написати програму, яка дасть змогу розв'язати названу задачу.

Вхідні дані
    Перший рядок вхідного файлу INPUT.TXT містить ціле число n - кількість процедур у програмі (1 ≤ n ≤ 100). 
Далі йдуть n блоків, що описують процедури. Після кожного блоку йде рядок, який містить 5 символів «*».
    Опис процедури починається з рядка, що містить її ідентифікатор, який складається тільки з маленьких літер 
англійського алфавіту та цифр. Ідентифікатор непорожній, і його довжина не перевищує 100 символів. Далі йде рядок, 
що містить число k (k ≤ n ) - кількість процедур, які можуть бути викликані описуваною процедурою. Наступні k рядків 
містять ідентифікатори цих процедур - по одному ідентифікатору на рядку.
    Різні процедури мають різні ідентифікатори. При цьому жодна процедура не може викликати процедуру, яка не описана 
у вхідному файлі.

Вихідні дані
    У вихідний файл OUTPUT.TXT для кожної процедури, присутньої у вхідних даних, необхідно вивести слово YES, якщо 
вона є потенційно рекурсивною, і слово NO - інакше, у тому самому порядку, в якому вони перелічені у вхідних даних.
 */


namespace Lab3
{
    public class Program
    {
        //[STAThread]
        public static void Main(string[] args)
        {
            try
            {
                Console.OutputEncoding = Encoding.UTF8;
                string inputFilePath = args.Length > 0 ? args[0] : Path.Combine("Lab3", "INPUT.TXT");
                string outputFilePath = Path.Combine("Lab3", "OUTPUT.TXT");

                string[] input = File.ReadAllLines(inputFilePath);
                var (procedures, n) = RecursiveCheck.ReadInput(input);


                var result = RecursiveCheck.CheckProcedures(procedures);
                File.WriteAllText(outputFilePath, string.Join(Environment.NewLine, result));

                Console.WriteLine("File OUTPUT.TXT successfully created");
                Console.WriteLine("LAB #3");
                Console.WriteLine("Input data:");
                Console.WriteLine(string.Join(Environment.NewLine, input).Trim());
                Console.WriteLine("Output data:");
                Console.WriteLine(string.Join(Environment.NewLine, result));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            Console.WriteLine('\n');
        }
    }
}